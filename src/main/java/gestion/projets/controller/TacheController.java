package gestion.projets.controller;

import gestion.projets.model.Tache;
import gestion.projets.model.Tache.StatutTache;
import gestion.projets.model.EmployeeTache;
import gestion.projets.service.TacheService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

/**
 * Contr√¥leur REST pour la gestion des t√¢ches
 * Expose les endpoints de l'API
 */
@RestController
@RequestMapping("/api/taches")
@Tag(name = "T√¢ches", description = "API de gestion des t√¢ches")
@CrossOrigin(origins = "*")
public class TacheController {

    @Autowired
    private TacheService tacheService;

    // üìò R√©cup√©rer toutes les t√¢ches
    @GetMapping
    @Operation(summary = "R√©cup√©rer toutes les t√¢ches", description = "Retourne la liste compl√®te de toutes les t√¢ches")
    public ResponseEntity<List<Tache>> getAllTaches() {
        return ResponseEntity.ok(tacheService.getAllTaches());
    }

    // üìò R√©cup√©rer une t√¢che par ID
    @GetMapping("/{id}")
    @Operation(summary = "R√©cup√©rer une t√¢che par ID", description = "Retourne les d√©tails d'une t√¢che sp√©cifique")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "T√¢che trouv√©e"),
            @ApiResponse(responseCode = "404", description = "T√¢che introuvable")
    })
    public ResponseEntity<Tache> getTacheById(@PathVariable Integer id) {
        return tacheService.getTacheById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // üìò Cr√©er une t√¢che (rattach√©e √† un projet)
    @PostMapping("/projet/{idProjet}")
    @Operation(summary = "Cr√©er une nouvelle t√¢che", description = "Cr√©e une nouvelle t√¢che li√©e √† un projet")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "T√¢che cr√©√©e avec succ√®s"),
            @ApiResponse(responseCode = "400", description = "Donn√©es invalides ou projet introuvable")
    })
    public ResponseEntity<?> createTache(
            @Parameter(description = "ID du projet", example = "1") @PathVariable Integer idProjet,
            @Valid @RequestBody Tache tache) {
        try {
            Tache nouvelleTache = tacheService.createTache(tache, idProjet);
            return ResponseEntity.status(HttpStatus.CREATED).body(nouvelleTache);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    //  Mettre √† jour une t√¢che
    @PutMapping("/{id}")
    @Operation(summary = "Mettre √† jour une t√¢che", description = "Met √† jour les informations d'une t√¢che existante")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "T√¢che mise √† jour"),
            @ApiResponse(responseCode = "404", description = "T√¢che introuvable"),
            @ApiResponse(responseCode = "400", description = "Donn√©es invalides")
    })
    public ResponseEntity<?> updateTache(@PathVariable Integer id, @Valid @RequestBody Tache tacheDetails) {
        try {
            return ResponseEntity.ok(tacheService.updateTache(id, tacheDetails));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    // Supprimer une t√¢che
    @DeleteMapping("/{id}")
    @Operation(summary = "Supprimer une t√¢che", description = "Supprime une t√¢che du syst√®me")
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "T√¢che supprim√©e"),
            @ApiResponse(responseCode = "404", description = "T√¢che introuvable")
    })
    public ResponseEntity<?> deleteTache(@PathVariable Integer id) {
        try {
            tacheService.deleteTache(id);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    // üìò Rechercher des t√¢ches par titre
    @GetMapping("/search")
    @Operation(summary = "Rechercher des t√¢ches", description = "Recherche des t√¢ches dont le titre contient le terme sp√©cifi√©")
    public ResponseEntity<List<Tache>> searchTaches(@RequestParam String titre) {
        return ResponseEntity.ok(tacheService.searchTachesByTitre(titre));
    }

    // R√©cup√©rer les t√¢ches d‚Äôun projet
    @GetMapping("/projet/{idProjet}")
    @Operation(summary = "R√©cup√©rer les t√¢ches d‚Äôun projet", description = "Retourne toutes les t√¢ches d‚Äôun projet sp√©cifique")
    public ResponseEntity<List<Tache>> getTachesByProjet(@PathVariable Integer idProjet) {
        return ResponseEntity.ok(tacheService.getTachesByProjet(idProjet));
    }

    // üìò R√©cup√©rer les t√¢ches d‚Äôun employ√©
    @GetMapping("/employe/{matricule}")
    @Operation(summary = "R√©cup√©rer les t√¢ches d‚Äôun employ√©", description = "Retourne toutes les t√¢ches assign√©es √† un employ√©")
    public ResponseEntity<List<Tache>> getTachesByEmploye(@PathVariable String matricule) {
        return ResponseEntity.ok(tacheService.getTachesByEmploye(matricule));
    }

    // üìò R√©cup√©rer les t√¢ches en retard
    @GetMapping("/en-retard")
    @Operation(summary = "R√©cup√©rer les t√¢ches en retard", description = "Retourne les t√¢ches dont la date de fin est d√©pass√©e et non termin√©es")
    public ResponseEntity<List<Tache>> getTachesEnRetard() {
        return ResponseEntity.ok(tacheService.getTachesEnRetard());
    }

    // üìò Filtrer par statut
    @GetMapping("/statut/{statut}")
    @Operation(summary = "R√©cup√©rer les t√¢ches par statut", description = "Retourne les t√¢ches selon leur statut (EN_COURS, TERMINEE, EN_ATTENTE)")
    public ResponseEntity<List<Tache>> getTachesByStatut(@PathVariable StatutTache statut) {
        return ResponseEntity.ok(tacheService.getTachesByStatut(statut));
    }

    // üìò Changer le statut d‚Äôune t√¢che
    @PutMapping("/{id}/statut")
    @Operation(summary = "Changer le statut d‚Äôune t√¢che", description = "Met √† jour uniquement le statut d‚Äôune t√¢che")
    public ResponseEntity<?> changeStatut(
            @PathVariable Integer id,
            @RequestParam StatutTache statut) {
        try {
            return ResponseEntity.ok(tacheService.changeStatut(id, statut));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    // üìò Assigner un employ√© √† une t√¢che
    @PostMapping("/{idTache}/assigner")
    @Operation(summary = "Assigner un employ√© √† une t√¢che", description = "Associe un employ√© √† une t√¢che avec un r√¥le donn√©")
    public ResponseEntity<?> assignerEmploye(
            @PathVariable Integer idTache,
            @RequestParam String matricule,
            @RequestParam String role) {
        try {
            EmployeeTache affectation = tacheService.assignerEmploye(idTache, matricule, role);
            return ResponseEntity.status(HttpStatus.CREATED).body(affectation);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // üìò Retirer un employ√© d‚Äôune t√¢che
    @DeleteMapping("/{idTache}/retirer")
    @Operation(summary = "Retirer un employ√© d‚Äôune t√¢che", description = "Supprime une affectation entre un employ√© et une t√¢che")
    public ResponseEntity<?> retirerEmploye(
            @PathVariable Integer idTache,
            @RequestParam String matricule) {
        try {
            tacheService.retirerEmploye(idTache, matricule);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }
}
